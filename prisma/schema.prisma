generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  githubUsername       String?              @unique @map("github_username")
  githubId             String?              @unique @map("github_id")
  displayName          String?              @map("display_name")
  avatarUrl            String?              @map("avatar_url")
  githubData           Json?                @map("github_data")
  totalAura            Int                  @default(0) @map("total_aura")
  currentStreak        Int                  @default(0) @map("current_streak")
  longestStreak        Int                  @default(0) @map("longest_streak")
  lastContributionDate DateTime?            @map("last_contribution_date")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  banExpiresAt         DateTime?            @map("ban_expires_at")
  banReason            String?              @map("ban_reason")
  bannedAt             DateTime?            @map("banned_at")
  bannedBy             String?              @map("banned_by")
  isBanned             Boolean              @default(false) @map("is_banned")
  auraCalculations     AuraCalculation[]
  userBadges           UserBadge[]
  globalLeaderboard    GlobalLeaderboard?
  monthlyLeaderboard   MonthlyLeaderboard[]
  monthlyWinners       MonthlyWinners[]

  @@map("users")
}

model AuraCalculation {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  /// For Postgres: add @db.Date
  date               DateTime
  contributionsCount Int      @default(0) @map("contributions_count")
  baseAura           Int      @default(0) @map("base_aura")
  streakBonus        Int      @default(0) @map("streak_bonus")
  consistencyBonus   Int      @default(0) @map("consistency_bonus")
  qualityBonus       Int      @default(0) @map("quality_bonus")
  totalAura          Int      @default(0) @map("total_aura")
  repositoriesData   Json?    @map("repositories_data")
  /// For Postgres: add @db.Timestamptz(6)
  createdAt          DateTime @default(now()) @map("created_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("aura_calculations")
}

model Badge {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?
  icon        String?
  color       String?
  rarity      BadgeRarity @default(COMMON)
  criteria    Json?
  isMonthly   Boolean     @default(false) @map("is_monthly")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  userBadges  UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  badgeId   String   @map("badge_id")
  earnedAt  DateTime @default(now()) @map("earned_at")
  monthYear String?  @map("month_year")
  rank      Int?
  metadata  Json?
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId, monthYear])
  @@map("badge")
}

model MonthlyLeaderboard {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  monthYear          String   @map("month_year")
  totalAura          Int      @default(0) @map("total_aura")
  contributionsCount Int      @default(0) @map("contributions_count")
  rank               Int
  createdAt          DateTime @default(now()) @map("created_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, monthYear])
  @@map("monthly_leaderboards")
}

model MonthlyWinners {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  monthYear          String   @map("month_year")
  rank               Int // 1, 2, or 3
  totalAura          Int      @default(0) @map("total_aura")
  contributionsCount Int      @default(0) @map("contributions_count")
  badgeAwarded       Boolean  @default(false) @map("badge_awarded")
  capturedAt         DateTime @default(now()) @map("captured_at")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, monthYear])
  @@unique([monthYear, rank])
  @@map("monthly_winners")
}

model GlobalLeaderboard {
  id          String   @id @default(uuid())
  userId      String   @unique @map("user_id")
  totalAura   Int      @default(0) @map("total_aura")
  rank        Int
  lastUpdated DateTime @default(now()) @map("last_updated")
  year        String?
  yearlyAura  Float    @default(0) @map("yearly_aura")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year])
  @@map("global_leaderboard")
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}
